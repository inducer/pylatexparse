#! /usr/bin/env python3

import sys
from pylatexparse import (
        CSNAME_TO_ARG_COUNTS as CSNAME_TO_ARG_COUNTS_BASE,
        parse_latex, Mapper, StringifyMapper,
        LatexDoc, ControlSequence)

CSNAME_TO_ARG_COUNTS = CSNAME_TO_ARG_COUNTS_BASE.copy()

CSNAME_TO_ARG_COUNTS.update({
        "urcornerlinkdemo": (2, 0),
        "dblurcornerlinkdemo": (2, 0),
        "dblurcornerlinkinclass": (2, 0),
        "urcornerlinkdemoinclass": (2, 0),
        "urcornerlinkinclass": (2, 0),

        "lgcond": (1, 0),
        "algcond": (1, 0),
        "tlgcond": (1, 0),
        "tmdcond": (1, 0),
        "mdcond": (1, 0),
        "atsmcond": (1, 0),
        "asmcond": (1, 0),
        "smcond": (1, 0),
        "sitem": (1, 0),
        "mitem": (1, 0),
        "litem": (1, 0),
        "coloremph": (1, 0),
        "fillnum": (1, 0),
        "Vec": (1, 0),
        "fl": (1, 0),
        "emach": (0, 0),
        "argmin": (0, 0),
        "B": (1, 0),
        "T": (0, 0),
        "filufil": (2, 0),
        "blomat": (1, 0),
        "bomat": (1, 0),
        "blmat": (1, 0),
        "brmat": (1, 0),
        "bmat": (1, 0),
        "dee": (0, 0),
        })


class IndentingStringifyMapper(StringifyMapper):
    def __init__(self, indentation):
        self.indentation = indentation
        self.eat_newline_if_next = False

    def map_eol(self, node):
        return "\n" + " "*self.indentation


class OrgPrinter(Mapper):
    def __init__(self):
        self.enum_kinds = []
        self.result = []

    # {{{ tools

    def _indent(self, offset=0):
        return 2*max(len(self.enum_kinds)+offset, 0)

    def _str(self, node):
        strmap = IndentingStringifyMapper(self._indent())
        return strmap.rec(node)

    def print(self, s):
        self.eprint(s)
        self.eprint(self._indent()*" ")

    def eprint(self, s):
        if isinstance(s, LatexDoc):
            self.result.append(self._str(s))
        else:
            self.result.append(s)

    def ensure_newline(self):
        i = len(self.result) - 1

        while True:
            if i < 0:
                break

            s_i = self.result[i]
            s_i_strip = s_i.rstrip(" \t")
            if not s_i_strip:
                self.result.pop()
                i = i-1
            elif s_i_strip.endswith("\n"):
                self.result[i] = s_i_strip
                return
            else:
                self.result.append("\n")
                return

    # }}}

    def map_eol(self, node):
        self.eprint("\n")
        self.eprint(self._indent()*" ")

    def map_container(self, node):
        for ch in node.content:
            self.rec(ch)

    def map_text(self, node):
        assert "\n" not in node.text
        self.eprint(node.text)

    def map_group(self, node):
        if (node.content
                and isinstance(node.content[0], ControlSequence)
                and node.content[0].name == "it"):
            self.eprint("/")
            for ch in node.content[1:]:
                self.rec(ch)
            self.eprint("/")

        elif (node.content
                and isinstance(node.content[0], ControlSequence)
                and node.content[0].name == "bf"):
            self.eprint("*")
            for ch in node.content[1:]:
                self.rec(ch)
            self.eprint("*")

        else:
            self.eprint(str(node))

    def map_controlseq(self, node):
        if node.name in ["date"]:
            pass
        elif node.name == "subtitle":
            self.ensure_newline()
            self.print(f"* {node.args[0]}")
        elif node.name == "section":
            self.ensure_newline()
            self.print(f"** {node.args[0]}")
        elif node.name == "subsection":
            # FIXME!
            self.ensure_newline()
            self.print(f"*** {node.args[0]}")

        elif node.name == "textbf":
            self.eprint("*")
            for ch in node.args:
                self.rec(ch)
            self.eprint("*")

        elif node.name in ["emph", "textit"]:
            self.eprint("/")
            for ch in node.args:
                self.rec(ch)
            self.eprint("/")

        elif node.name in ["item", "sitem", "mitem"]:
            self.ensure_newline()
            ind = self._indent(offset=-1)*" "
            if self.enum_kinds[-1] == "itemize":
                self.eprint(f"{ind}- ")
            elif self.enum_kinds[-1] == "enumerate":
                self.eprint(f"{ind}1. ")
            else:
                raise ValueError("unexpected enum_kind")

        elif node.name in [
                "tlgcond", "algcond", "lgcond",
                "mdcond",
                # FIXME ?
                "tmdcond",
                "smcond",
                # FIXME ?
                "asmcond",
                # FIXME ?
                "atsmcond"
                ]:
            size_from_csname = {
                    "tlgcond": r"\lghide",
                    "algcond": r"\lghide",
                    "lgcond": r"\lghide",
                    "mdcond": r"\mdhide",
                    "tmdcond": r"\mdhide",
                    "smcond": r"\smhide",
                    "asmcond": r"\smhide",
                    "atsmcond": r"\smhide",
                    }

            self.ensure_newline()
            self.print(
                    "#+LATEX: "
                    rf"\begin{{hidden}}[{size_from_csname[node.name]}]")
            for ch in node.args:
                self.rec(ch)
            self.ensure_newline()
            self.print(r"#+LATEX: \end{hidden}")

        elif node.name in [
                "\"", "coloremph", "fillnum",
                "vspace", "vspace*",
                " ", "\\",
                "smallskip", "medskip", "bigskip", "filufil",
                "eqref",
                "footnote",
                ]:
            self.eprint(node)

        elif "cornerlink" in node.name:
            self.eprint(node)

        else:
            raise NotImplementedError(
                    rf"do not know how to handle '\{node.name}'")

    def map_environment(self, node):
        if node.name == "frame":
            if "titlepage" in str(node):
                return

            self.ensure_newline()
            if node.args:
                self.print(f"*** {node.args[0]}")
            else:
                self.print(f"*** (no title)")
            for ch in node.content:
                self.rec(ch)

        elif node.name == "itemize":
            self.enum_kinds.append("itemize")
            for ch in node.content:
                self.rec(ch)
            self.enum_kinds.pop()

        elif node.name == "enumerate":
            self.enum_kinds.append("enumerate")
            for ch in node.content:
                self.rec(ch)
            self.enum_kinds.pop()

        elif node.name in [
                "$", "(", "$$", "[",
                "align", "align*", "alignat*",
                ]:
            self.eprint(node)

        else:
            raise NotImplementedError(
                    rf"do not know how to handle '{node.name}' env")


def main():
    for fname in sys.argv[1:]:
        with open(fname, "r") as inf:
            doc = parse_latex(
                inf.read(),
                csname_to_arg_counts=CSNAME_TO_ARG_COUNTS)

            org_printer = OrgPrinter()
            try:
                org_printer.rec(doc)
            finally:
                print("".join(org_printer.result))


if __name__ == "__main__":
    main()
